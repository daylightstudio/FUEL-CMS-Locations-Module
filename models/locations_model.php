<?php  if (!defined('BASEPATH')) exit('No direct script access allowed');

require_once(FUEL_PATH.'models/base_module_model.php');

class Locations_model extends Base_module_model {

	// read more about models in the user guide to get a list of all properties. Below is a subset of the most common:

	public $record_class = 'Location'; // the name of the record class (if it can't be determined)
	public $filters = array('name', 'address', 'city', 'state', 'zip', 'phone', 'website'); // filters to apply to when searching for items
	public $required = array(); // an array of required fields. If a key => val is provided, the key is name of the field and the value is the error message to display
	public $foreign_keys = array('category_id' => array(FUEL_FOLDER => 'fuel_categories_model', 'where' => array('context' => 'locations'))); // map foreign keys to table models
	public $linked_fields = array(); // fields that are linked meaning one value helps to determine another. Key is the field, value is a function name to transform it. (e.g. array('slug' => 'title'), or array('slug' => arry('name' => 'strtolower')));
	public $boolean_fields = array(); // fields that are tinyint and should be treated as boolean
	public $unique_fields = array(); // fields that are not IDs but are unique. Can also be an array of arrays for compound keys
	public $parsed_fields = array(); // fields to automatically parse
	public $serialized_fields = array(); // fields that contain serialized data. This will automatically serialize before saving and unserialize data upon retrieving
	public $has_many = array(); // keys are model, which can be a key value pair with the key being the module and the value being the model, module (if not specified in model parameter), relationships_model, foreign_key, candidate_key
	public $belongs_to = array(); // keys are model, which can be a key value pair with the key being the module and the value being the model, module (if not specified in model parameter), relationships_model, foreign_key, candidate_key
	public $formatters = array(); // an array of helper formatter functions related to a specific field type (e.g. string, datetime, number), or name (e.g. title, content) that can augment field results
	public $display_unpublished_if_logged_in = FALSE;
	
	protected $friendly_name = ''; // a friendlier name of the group of objects
	protected $singular_name = ''; // a friendly singular name of the object


	function __construct()
	{
		parent::__construct('locations'); // table name
	}

	function related_items($values = array())
	{
		$html = '';
		if (!empty($values['id']))
		{
			$html = '<br><iframe src="'.site_url('locations/map').'?id='.$values['id'].'" width="100%" height="386" name="map" id="map" frameborder="0"></iframe>';	
		}
		return $html;
	}

	function list_items($limit = NULL, $offset = NULL, $col = 'name', $order = 'asc', $just_count = FALSE)
	{
		$this->db->join($this->_tables['fuel_categories'], $this->_tables['fuel_categories'].'.id = locations.category_id','left');
		$this->db->select('locations.id, locations.name, '.$this->_tables['fuel_categories'].'.name AS category, locations.address, locations.city, locations.state, locations.zip, locations.phone, locations.website, locations.precedence, locations.published');
		$data = parent::list_items($limit, $offset, $col, $order, $just_count = FALSE);
		return $data;
	}

	function find_location($where)
	{
		$this->db->select('locations.*, '.$this->_tables['fuel_categories'].'.slug as category, '.$this->_tables['fuel_categories'].'.slug as category_slug');
		$data = $this->find_all_array($where);
		$i = 1;
		foreach($data as $k => $v)
		{
			$data[$k]['markerText'] = "{$i}";
			$i++;	
		}
		return $data;

	}

	function form_fields($values = array(), $related = array())
	{	
		$fields = parent::form_fields($values, $related);
		$fields['latitude']['comment'] = 'This value will automatically be generated by Google\'s geolocation service if the address is legit';
		$fields['longitude']['comment'] = 'This value will automatically be generated by Google\'s geolocation service if the address is legit';
		return $fields;
	}
	
	function on_before_save($values)
	{
		$CI =& get_instance();
		$CI->load->helper('google');

		if (!empty($values['address']))
		{
			$address = self::full_address($values);

			$geo = google_geolocate($values, 'location');

			if (!empty($geo['latitude']) AND empty($values['latitude']))
			{
				$values['latitude'] = $geo['latitude'];
			}
			if (!empty($geo['latitude']) AND empty($values['longitude']))
			{
				$values['longitude'] = $geo['longitude'];
			}
		}
		return $values;
	}

	static function full_address($values, $break = '')
	{
		$str = $values['address'];
		$str .= $break;
		$str .= $values['city'];
		$str .= ', ';
		$str .= $values['state'];
		$str .= ' ';
		$str .= $values['zip'];
		return $str;
	}

	function on_after_save($values)
	{
		parent::on_after_save($values);
		return $values;
	}

	function _common_query($display_unpublished_if_logged_in = NULL)
	{
		parent::_common_query($display_unpublished_if_logged_in);

		// remove if no precedence column is provided
		$this->db->join($this->_tables['fuel_categories'], 'category_id = '.$this->_tables['fuel_categories'].'.id', 'LEFT');
		$this->db->order_by('precedence asc');
	}

}

class Location_model extends Base_module_record {
	
	public $markerText = NULL;

	// put your record model code here
	function get_full_address($break = '')
	{
		return Locations_model::full_address($this->values(), $break);
	}

	function get_name_url()
	{
		return anchor($this->website_url, $this->name);
	}

	function get_website_url()
	{
		return prep_url($this->website);
	}

	function get_map_url($use_latlng = FALSE)
	{
		$url = 'locations/map';
		if ($use_latlng)
		{
			return site_url($url.'?startpoint='.$this->latitude.','.$this->longitude);
		}
		else
		{
			return site_url($url.'?id='.$this->id);
		}
	}
}